from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import random

from utils.states import LessonStates
from utils.api import get_words_for_lessons

from typing import Dict, List

router = Router()

WordDict = Dict[str, str | int | List[Dict[str, str]]]

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /new_lesson
@router.message(Command("new_lesson"))
async def start_new_lesson(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state in [LessonStates.PREVIEW, LessonStates.WORD_INTRODUCTION, LessonStates.TRANSLATION_PRACTICE]:
        await message.answer(
            "‚ö†Ô∏è –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —É—Ä–æ–∫!\n"
            "–ó–∞–∫–æ–Ω—á–∏—Ç–µ –µ–≥–æ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —É—Ä–æ–∫", callback_data="cancel_lesson")]
                ]
            )
        )
        return
        
    words = get_words_for_lessons(countWords=5)
    
    repetition = [{
        "word": word['english'],
        "translation": word['translation'],
        "transcription": word.get('transcription', ''),
        "examples": word.get('examples', []),
        "synonyms": word.get('synonyms', []),
        "rus_eng_count": 0,
        "eng_rus_count": 0,
        "total_count": 0
    } for word in words]

    await state.update_data(
        words=words,
        current_word_index=0,
        count_words=5,
        repetition=repetition,
        current_word = {},
        mode = "",
        errors=0
    )
    await state.set_state(LessonStates.PREVIEW)
    
    words_preview = "\n".join(f"‚Ä¢ <b>{word['english']}</b> - {word['translation']}" for word in words)
    
    await message.answer(
        f"üåø <b>–£—Ä–æ–∫ ‚Ññ5! –¢–µ–º–∞: –ï–¥–∞</b> üåø\n\n"
        f"‚ú® –ò–∑—É—á–∏—Ç–µ {len(words)} –Ω–æ–≤—ã—Ö —Å–ª–æ–≤:\n"
        f"{words_preview}\n\n"
        f"üéØ –§–æ—Ä–º–∞—Ç —É—Ä–æ–∫–∞:\n"
        f"‚ñ´Ô∏è –ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ —Å –∫–∞–∂–¥—ã–º —Å–ª–æ–≤–æ–º\n"
        f"‚ñ´Ô∏è –ü—Ä–∞–∫—Ç–∏–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞\n"
        f"‚ñ´Ô∏è –ü–æ–¥—Å–∫–∞–∑–∫–∏ –ø—Ä–∏ –∑–∞—Ç—Ä—É–¥–Ω–µ–Ω–∏—è—Ö\n\n"
        f"‚è± –í—Ä–µ–º—è: ~{len(words)} –º–∏–Ω | üèÜ –ù–∞–≥—Ä–∞–¥–∞: {len(words)*10} –º–æ–Ω–µ—Ç\n\n"
        f"<i>–°–æ–≤–µ—Ç: –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å —ç—Ç–∏–º–∏ —Å–ª–æ–≤–∞–º–∏!</i>",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üöÄ –ù–∞—á–∞—Ç—å", callback_data="start_lesson")],
                [InlineKeyboardButton(text="‚è∏ –ü–æ–∑–∂–µ", callback_data="cancel_lesson")]
            ]
        ),
        parse_mode="HTML"
    )

@router.callback_query(F.data == "start_lesson", LessonStates.PREVIEW)
async def start_lesson(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    await callback.answer()
    await introduce_next_word(callback.message, state)

@router.callback_query(F.data == "cancel_lesson")
async def cancel_lesson_callback(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text("‚ùå –£—Ä–æ–∫ –æ—Ç–º–µ–Ω—ë–Ω")
    await callback.answer()

async def introduce_next_word(message: Message, state: FSMContext):
    data = await state.get_data()
    word = data["words"][data["current_word_index"]]
    example = random.choice(word["examples"])
    
    await message.answer(
        f"üéØ <b>–ù–æ–≤–æ–µ —Å–ª–æ–≤–æ:</b>\n\n"
        f"<b>–ê–Ω–≥–ª–∏–π—Å–∫–∏–π:</b> {word['english']}\n"
        f"<b>–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è:</b> [{word['transcription']}]\n"
        f"<b>–ü–µ—Ä–µ–≤–æ–¥:</b> {word['translation']}\n\n"
        f"<i>–ü—Ä–∏–º–µ—Ä:</i> {example['english']} - {example['translation']}",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚û°Ô∏è –ö –ø—Ä–∞–∫—Ç–∏–∫–µ", callback_data="to_practice")]
            ]
        )
    )
    await state.set_state(LessonStates.WORD_INTRODUCTION)

@router.callback_query(F.data == "to_practice", LessonStates.WORD_INTRODUCTION)
async def practice_translation_callback(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    await callback.answer()
    await practice_translation(callback.message, state)


# # –§—É–Ω–∫—Ü–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–∞
async def practice_translation(message: Message, state: FSMContext):
    data = await state.get_data()
    word = data["words"][data["current_word_index"]]
    
    await message.answer(
        f"‚úèÔ∏è <b>–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –Ω–∞ —Ä—É—Å—Å–∫–∏–π:</b>\n"
        f"<i>{word['english']}</i>"
    )
    await state.set_state(LessonStates.TRANSLATION_PRACTICE)

@router.message(LessonStates.TRANSLATION_PRACTICE)
async def check_translation(message: Message, state: FSMContext):
    data = await state.get_data()
    word = data["words"][data["current_word_index"]]
    user_answer = message.text.strip().lower()

    if user_answer == word['translation'].lower():
        await message.answer("‚úÖ –í–µ—Ä–Ω–æ! –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!")
        await state.update_data(current_word_index=data["current_word_index"] + 1)
        print(data["current_word_index"])

        if data["current_word_index"] >= (len(data["words"]) - 1):
            await message.answer(
                f"üéâ <b>–û—Ç–ª–∏—á–Ω–æ! –ú—ã –ø–æ–∑–Ω–∞–∫–æ–º–∏–ª–∏—Å—å —Å–æ –≤—Å–µ–º–∏ –Ω–æ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏!</b>\n\n"
                f"‚ú® <i>–¢–µ–ø–µ—Ä—å –∑–∞–∫—Ä–µ–ø–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —á–µ—Ä–µ–∑ ¬´–£–º–Ω–æ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ¬ª</i> ‚ú®\n\n"
                f"üîÅ <b>–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:</b>\n"
                f"‚ñ´Ô∏è –°–ª—É—á–∞–π–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ —Å–ª–æ–≤, –∫–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ –Ω–∞–¥–æ –±—É–¥–µ—Ç –Ω–∞–ø–∏—Å–∞—Ç—å:\n"
                f"‚ñ´Ô∏è 2 —Ä–∞–∑–∞ —Å —Ä—É—Å—Å–∫–æ–≥–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π\n"
                f"‚ñ´Ô∏è 1 —Ä–∞–∑ —Å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –Ω–∞ —Ä—É—Å—Å–∫–∏–π\n\n"
                f"üß† <i>–¢–∞–∫–æ–π –ø–æ–¥—Ö–æ–¥ –ø–æ–º–æ–∂–µ—Ç –ª—É—á—à–µ –∑–∞–ø–æ–º–Ω–∏—Ç—å —Å–ª–æ–≤–∞</i>\n\n"
                f"‚è± ~{len(data['words'])*1.5} –º–∏–Ω\n\n"
                f"<b>–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ?</b>",
                reply_markup=InlineKeyboardMarkup(
                    inline_keyboard=[
                        [InlineKeyboardButton(text="üîÅ –ù–∞—á–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ", callback_data="start_repetition")]
                    ]
                ),
                parse_mode="HTML"
            )
            await state.set_state(LessonStates.REPETITION)
        else:
            await state.set_state(LessonStates.WORD_INTRODUCTION)
            await introduce_next_word(message, state)

    else:
        hint = random.choice([
                f"–ü–µ—Ä–≤–∞—è –±—É–∫–≤–∞: <b>{word['translation'][0].upper()}</b>",
                f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—É–∫–≤: {len(word['translation'])}",
                f"–ü—Ä–∏–º–µ—Ä: {random.choice(word['examples'])}",
                f"–°–∏–Ω–æ–Ω–∏–º: {random.choice(word.get('synonyms', ['–Ω–µ—Ç —Å–∏–Ω–æ–Ω–∏–º–æ–≤']))}",
                f"–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è: {word['transcription']}"
            ])
        countErrors = data["errors"] + 1
        await state.update_data(errors=countErrors)
        await message.answer(f"‚ùå –ü–æ—á—Ç–∏! –ü–æ–¥—Å–∫–∞–∑–∫–∞: {hint}")

@router.callback_query(F.data == "start_repetition", LessonStates.REPETITION)
async def repetition_callback(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await repetition_translation(callback.message, state)

async def repetition_translation(message: Message, state: FSMContext):
    data = await state.get_data()
    repetition = data["repetition"]
    print(repetition)

    available_words = [
        word for word in repetition 
        if word['rus_eng_count'] < 2 or word['eng_rus_count'] < 1
    ]

    if not available_words:
        await finish_lesson(message, state)
        return

    randomWord = random.choice(available_words)
    while randomWord == data["current_word"]:
        randomWord = random.choice(available_words)
    await state.update_data(current_word=randomWord)

    modes = []
    if randomWord['rus_eng_count'] < 2:
        modes.append('rus_eng')
    if randomWord['eng_rus_count'] < 1:
        modes.append('eng_rus')

    selected_mode = random.choice(modes)

    if selected_mode == 'rus_eng':
        question = f"üî§ <b>–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π:</b>\n<code>{randomWord['translation']}</code>"
        await state.update_data(mode='rus_eng')
    else:
        question = f"üî§ <b>–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –Ω–∞ —Ä—É—Å—Å–∫–∏–π:</b>\n<code>{randomWord['word']}</code>"
        await state.update_data(mode='eng_rus')
    
    await message.answer(question)
    await state.set_state(LessonStates.CHECK_REPETITION)

@router.message(LessonStates.CHECK_REPETITION)
async def check_repetition(message: Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    current_word = data["current_word"]
    user_answer = message.text.strip().lower()
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é —Å–ø–∏—Å–∫–∞ repetition –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è
    repetition = data["repetition"].copy()
    
    # –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ —Å–ª–æ–≤–∞ –≤ —Å–ø–∏—Å–∫–µ repetition
    word_index = next((i for i, w in enumerate(repetition) 
                      if w["word"] == current_word["word"]), None)
    
    if word_index is None:
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞: —Å–ª–æ–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Å–ø–∏—Å–∫–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è")
        return
    
    is_correct = (data["mode"] == 'rus_eng' and user_answer == current_word['word'].lower()) or \
                 (data["mode"] == 'eng_rus' and user_answer == current_word['translation'].lower())

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
    if is_correct:
        await message.answer("‚úÖ <b>–í–µ—Ä–Ω–æ!</b> –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!", parse_mode="HTML")
        
        if data["mode"] == 'rus_eng':
            repetition[word_index]['rus_eng_count'] += 1
        else:
            repetition[word_index]['eng_rus_count'] += 1

        repetition[word_index]['total_count'] += 1
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(
            repetition=repetition,
            current_word=repetition[word_index]
        )

        await state.set_state(LessonStates.REPETITION)
        await repetition_translation(message, state)

    else:
        hint = await generate_hint(current_word, is_english_to_russian=data["mode"] == 'eng_rus')
        countErrors = data["errors"] + 1
        await state.update_data(errors=countErrors)
        await message.answer(f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ. {hint}", parse_mode="HTML")

async def generate_hint(word: WordDict, is_english_to_russian: bool) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–¥—Å–∫–∞–∑–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞"""
    hints = []
    
    if is_english_to_russian:
        hints.extend([
            f"–ü–µ—Ä–≤–∞—è –±—É–∫–≤–∞: <b>{word['translation'][0].upper()}</b>",
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—É–∫–≤: {len(word['translation'])}"
        ])
    else:
        hints.extend([
            f"–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è: <b>{word.get('transcription', '')}</b>",
            f"–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –Ω–∞: <b>{word['word'][0].upper()}</b>"
        ])
    
    if word.get('examples'):
        example = random.choice(word['examples'])
        hints.append(f"–ü—Ä–∏–º–µ—Ä: {example['english']} - {example['translation']}")
    
    if word.get('synonyms'):
        hints.append(f"–°–∏–Ω–æ–Ω–∏–º: {random.choice(word['synonyms'])}")
    
    return random.choice(hints)


async def finish_lesson(message: Message, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —É—Ä–æ–∫–∞ —Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π"""
    data = await state.get_data()
    total_words = len(data["words"])
    correct_answers = sum(w['total_count'] for w in data["repetition"])
    errors = data["errors"]
    reward = total_words * 10 + correct_answers * 2
    
    await message.answer(
        f"üèÅ <b>–£—Ä–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω!</b>\n\n"
        f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n"
        f"‚Ä¢ –ò–∑—É—á–µ–Ω–æ —Å–ª–æ–≤: {total_words}\n"
        f"‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {correct_answers}\n"
        f"‚Ä¢ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {errors}\n"
        f"üí∞ –ù–∞–≥—Ä–∞–¥–∞: {reward} –º–æ–Ω–µ—Ç\n\n"
        f"<i>–°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –∑–∞–≤—Ç—Ä–∞</i>",
        parse_mode="HTML"
    )
    await state.clear()
